import paramiko
import time

# ESXi Configuration
ESXI_HOST = "your-esxi-host-ip"
ESXI_USER = "your-esxi-username"
ESXI_PASSWORD = "your-esxi-password"  # Use SSH keys instead for better security
WINDOWS_TEMPLATE_VM = "Windows_template_VM"
SNAPSHOT_NAME = "suspended_snapshot"  # Name of the snapshot in suspended state
NUM_INSTANCES = 3  # Number of Windows instances to create
INSTANCE_PREFIX = "WinSandbox"  # Naming prefix
DATASTORE = "datastore1"  # Change according to your ESXi setup

def connect_esxi():
    """Establish SSH connection to ESXi."""
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    try:
        client.connect(ESXI_HOST, username=ESXI_USER, password=ESXI_PASSWORD, timeout=10)
        return client
    except Exception as e:
        print(f"Error connecting to ESXi: {e}")
        return None

def run_command(client, command):
    """Runs a shell command on ESXi via SSH."""
    stdin, stdout, stderr = client.exec_command(command)
    output = stdout.read().decode().strip()
    error = stderr.read().decode().strip()
    if error:
        print(f"Error executing command '{command}': {error}")
    return output

def get_vm_id(client, vm_name):
    """Retrieves the VM ID of a given VM name."""
    output = run_command(client, "vim-cmd vmsvc/getallvms")
    for line in output.split("\n"):
        if vm_name in line:
            return line.split()[0]  # VM ID is the first column
    return None

def clone_vm_from_snapshot(client, instance_name):
    """Clones a VM from a snapshot."""
    # Create new VM directory
    run_command(client, f"mkdir -p /vmfs/volumes/{DATASTORE}/{instance_name}")

    # Copy VMX and VMDK files with correct names
    commands = [
        f"cp /vmfs/volumes/{DATASTORE}/{WINDOWS_TEMPLATE_VM}/{WINDOWS_TEMPLATE_VM}.vmx /vmfs/volumes/{DATASTORE}/{instance_name}/{instance_name}.vmx",
        f"cp /vmfs/volumes/{DATASTORE}/{WINDOWS_TEMPLATE_VM}/{WINDOWS_TEMPLATE_VM}.vmdk /vmfs/volumes/{DATASTORE}/{instance_name}/{instance_name}.vmdk",
        f"cp /vmfs/volumes/{DATASTORE}/{WINDOWS_TEMPLATE_VM}/{WINDOWS_TEMPLATE_VM}-flat.vmdk /vmfs/volumes/{DATASTORE}/{instance_name}/{instance_name}-flat.vmdk",
        f"sed -i 's/{WINDOWS_TEMPLATE_VM}/{instance_name}/g' /vmfs/volumes/{DATASTORE}/{instance_name}/{instance_name}.vmx",  # Update VM name inside the VMX file
        f"vim-cmd solo/registervm /vmfs/volumes/{DATASTORE}/{instance_name}/{instance_name}.vmx"
    ]

    for cmd in commands:
        run_command(client, cmd)
        time.sleep(2)  # Ensure ESXi has time to register the VM

    # Revert the new VM to the snapshot state
    vm_id = get_vm_id(client, instance_name)
    if vm_id:
        run_command(client, f"vim-cmd vmsvc/snapshot.revert {vm_id} 0 1")  # Revert to the first snapshot (index 0)
        time.sleep(5)  # Wait for the revert operation to complete

    return vm_id

def power_on_vm(client, vm_id):
    """Powers on a VM by its ID."""
    command = f"vim-cmd vmsvc/power.on {vm_id}"
    run_command(client, command)

def suspend_vm(client, vm_id):
    """Suspends a VM by its ID."""
    command = f"vim-cmd vmsvc/power.suspend {vm_id}"
    run_command(client, command)

def create_sandbox_instances():
    """Creates multiple suspended Windows sandbox instances."""
    client = connect_esxi()
    if not client:
        return

    for i in range(NUM_INSTANCES):
        instance_name = f"{INSTANCE_PREFIX}_{i+1}"
        print(f"Creating instance: {instance_name}")
        
        vm_id = clone_vm_from_snapshot(client, instance_name)
        if vm_id:
            power_on_vm(client, vm_id)  # âœ… Power on the VM before suspending
            time.sleep(5)  # Wait for VM to stabilize before suspending
            suspend_vm(client, vm_id)
            print(f"Instance {instance_name} (ID: {vm_id}) suspended.")
        else:
            print(f"Failed to create or find VM ID for {instance_name}")
    
    client.close()

if __name__ == "__main__":
    create_sandbox_instances()
