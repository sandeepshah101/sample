import paramiko
import time

# ESXi Configuration
ESXI_HOST = "your-esxi-host-ip"
ESXI_USER = "your-esxi-username"
ESXI_PASSWORD = "your-esxi-password"  # Use SSH keys instead for better security
WINDOWS_TEMPLATE_VM = "Windows_template_VM"
NUM_INSTANCES = 3  # Number of Windows instances to create
INSTANCE_PREFIX = "WinSandbox"  # Naming prefix
DATASTORE = "datastore1"  # Change according to your ESXi setup

def connect_esxi():
    """Establish SSH connection to ESXi."""
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    try:
        client.connect(ESXI_HOST, username=ESXI_USER, password=ESXI_PASSWORD, timeout=10)
        return client
    except Exception as e:
        print(f"Error connecting to ESXi: {e}")
        return None

def run_command(client, command):
    """Runs a shell command on ESXi via SSH."""
    stdin, stdout, stderr = client.exec_command(command)
    output = stdout.read().decode().strip()
    error = stderr.read().decode().strip()
    if error:
        print(f"Error executing command '{command}': {error}")
    return output

def get_vm_id(client, vm_name):
    """Retrieves the VM ID of a given VM name."""
    output = run_command(client, "vim-cmd vmsvc/getallvms")
    for line in output.split("\n"):
        if vm_name in line:
            return line.split()[0]  # VM ID is the first column
    return None

def clone_vm(client, instance_name):
    """Clones the entire VM directory, including snapshots."""
    # Create new VM directory
    run_command(client, f"mkdir -p /vmfs/volumes/{DATASTORE}/{instance_name}")

    # Copy VM configuration and snapshot metadata files
    config_extensions = ['.vmx', '.vmxf', '.vmsd', '.nvram']
    for ext in config_extensions:
        run_command(client, f"cp /vmfs/volumes/{DATASTORE}/{WINDOWS_TEMPLATE_VM}/*{ext} /vmfs/volumes/{DATASTORE}/{instance_name}/")

    # Clone the base VMDK file using vmkfstools
    base_vmdk_file = f"/vmfs/volumes/{DATASTORE}/{WINDOWS_TEMPLATE_VM}/{WINDOWS_TEMPLATE_VM}.vmdk"
    new_base_vmdk_file = f"/vmfs/volumes/{DATASTORE}/{instance_name}/{instance_name}.vmdk"
    run_command(client, f"vmkfstools -i {base_vmdk_file} {new_base_vmdk_file} -d thin")

    # Copy snapshot VMDK files and sesparse files
    snapshot_files = run_command(client, f"ls /vmfs/volumes/{DATASTORE}/{WINDOWS_TEMPLATE_VM}/*.vmdk | grep -v '{WINDOWS_TEMPLATE_VM}.vmdk'").split()
    for snapshot_file in snapshot_files:
        new_snapshot_file = snapshot_file.replace(WINDOWS_TEMPLATE_VM, instance_name)
        run_command(client, f"cp {snapshot_file} {new_snapshot_file}")

    # Copy .vmem and .vmsn files for the suspended state
    suspended_extensions = ['.vmsn', '.vmem']
    for ext in suspended_extensions:
        run_command(client, f"cp /vmfs/volumes/{DATASTORE}/{WINDOWS_TEMPLATE_VM}/*{ext} /vmfs/volumes/{DATASTORE}/{instance_name}/")

    # Update VMX file to reference the correct VMDK files
    vmx_file_path = f"/vmfs/volumes/{DATASTORE}/{instance_name}/{WINDOWS_TEMPLATE_VM}.vmx"
    new_vmx_file_path = f"/vmfs/volumes/{DATASTORE}/{instance_name}/{instance_name}.vmx"
    run_command(client, f"mv {vmx_file_path} {new_vmx_file_path}")
    run_command(client, f"sed -i 's/{WINDOWS_TEMPLATE_VM}/{instance_name}/g' {new_vmx_file_path}")

    # Register the new VM
    run_command(client, f"vim-cmd solo/registervm {new_vmx_file_path}")

    return get_vm_id(client, instance_name)

def revert_to_snapshot(client, vm_id):
    """Reverts a VM to the specified snapshot."""
    command = f"vim-cmd vmsvc/snapshot.revert {vm_id} 0 1"  # Revert to the first snapshot (index 0)
    run_command(client, command)

def power_on_vm(client, vm_id):
    """Powers on a VM by its ID."""
    command = f"vim-cmd vmsvc/power.on {vm_id}"
    run_command(client, command)

def create_sandbox_instances():
    """Creates multiple suspended Windows sandbox instances."""
    client = connect_esxi()
    if not client:
        return

    for i in range(NUM_INSTANCES):
        instance_name = f"{INSTANCE_PREFIX}_{i+1}"
        print(f"Creating instance: {instance_name}")
        
        vm_id = clone_vm(client, instance_name)
        if vm_id:
            revert_to_snapshot(client, vm_id)  # Revert to the snapshot state
            power_on_vm(client, vm_id)  # Power on the VM to resume from the suspended state
            print(f"Instance {instance_name} (ID: {vm_id}) created and powered on.")
        else:
            print(f"Failed to create or find VM ID for {instance_name}")
    
    client.close()

if __name__ == "__main__":
    create_sandbox_instances()
